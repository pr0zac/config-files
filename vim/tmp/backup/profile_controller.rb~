class ProfileController < CrudController
    skip_before_filter :verify_admin_logged_in, :only => [:get_a_la_carte_profile]
    skip_before_filter :verify_post, :only => [:get_signed_profile, :get_raw_profile, :get_a_la_carte_profile]
    before_filter :verify_apns, :only => [:get_signed_profile]
    before_filter :verify_od_apns, :only => [:run_task]
    
    def initialize
        super
        @@model = Profile
    end
    
    def find_all
        result = ProfileHelper.find_all
        render :json => { :result => result }
    end
    
    def find_matching
        post_data = request.body.read
        incoming_request = JSON.parse(post_data)
        result = ProfileHelper.find_matching(incoming_request)
        render :json => { :result => result }
    end
    
    def add_device
        post_data = request.body.read
        incoming_request = JSON.parse(post_data)
        result = ProfileHelper.add_device(params[:id], incoming_request)
        render :json => { :result => result }
    end
    
    def list_devices
        result = ProfileHelper.list_devices(params[:id])
        render :json => { :result => result }
    end
    
    def remove_device
        post_data = request.body.read
        incoming_request = JSON.parse(post_data)
        result = ProfileHelper.remove_device(params[:id], incoming_request)
        render :json => { :result => result }
    end
    
    def add_device_group
        post_data = request.body.read
        incoming_request = JSON.parse(post_data)
        result = ProfileHelper.add_device_group(params[:id], incoming_request)
        render :json => { :result => result }
    end
    
    def list_device_groups
        result = ProfileHelper.list_device_groups(params[:id])
        render :json => { :result => result }
    end
    
    def remove_device_group
        post_data = request.body.read
        incoming_request = JSON.parse(post_data)
        result = ProfileHelper.remove_device_group(params[:id], incoming_request)
        render :json => { :result => result }
    end
    
    def add_user
        post_data = request.body.read
        incoming_request = JSON.parse(post_data)
        result = ProfileHelper.add_user(params[:id], incoming_request)
        render :json => { :result => result }
    end
    
    def list_users
        result = ProfileHelper.list_users(params[:id])
        render :json => { :result => result }
    end
    
    def remove_user
        post_data = request.body.read
        incoming_request = JSON.parse(post_data)
        result = ProfileHelper.remove_user(params[:id], incoming_request)
        render :json => { :result => result }
    end

    def add_user_group
        post_data = request.body.read
        incoming_request = JSON.parse(post_data)
        result = ProfileHelper.add_user_group(params[:id], incoming_request)
        render :json => { :result => result }
    end
    
    def list_user_groups
        result = ProfileHelper.list_user_groups(params[:id])
        render :json => { :result => result }
    end
    
    def remove_user_group
        post_data = request.body.read
        incoming_request = JSON.parse(post_data)
        result = ProfileHelper.remove_user_group(params[:id], incoming_request)
        render :json => { :result => result }
    end

    def list_members
        result = ProfileHelper.list_members(params[:id])
        render :json => { :result => result }
    end
    
    def list_all_members
        result = ProfileHelper.list_all_members(params[:id])
        render :json => { :result => result }
    end
        
    def add_knob_set
        post_data = request.body.read
        incoming_request = JSON.parse(post_data)
        result = ProfileHelper.add_knob_set(params[:id], incoming_request)
        render :json => { :result => result }
    end
    
    def get_knob_sets
        result = ProfileHelper.get_knob_sets(params[:id])
        render :json => { :result => result }
    end
    
    def remove_knob_set
        post_data = request.body.read
        incoming_request = JSON.parse(post_data)
        result = ProfileHelper.remove_knob_set(params[:id], incoming_request)
        render :json => { :result => result }
    end
        
    def get_a_la_carte_profile
        profile = Profile.find_by_id(params[:id])
        user_guid = session[:user]['generated_uid']
        user = User.find_by_guid(user_guid)
        if user != nil && profile != nil && (user.get_adhoc_profiles.include?(profile) || profile.is_from_servermgr)
          profile_plist = ProfileHelper.get_raw_profile(profile)
          response.headers['Content-Type'] = 'application/x-apple-aspen-config'
          response.headers['Content-Disposition'] = "attachment; filename=#{profile.name.gsub(/\s+/, '_')}.mobileconfig"
          render :xml => profile_plist
        else 
          render :text => "401 Unauthorized", :status => 401
       end
    end
    
    def get_raw_profile
        profile = Profile.find_by_id(params[:id])
        user_guid = session[:user]['generated_uid']
        user = User.find_by_guid(user_guid)
        if user != nil && profile != nil && session[:user]['isAdmin']
          profile_plist = ProfileHelper.get_raw_profile(profile.id)
          response.headers['Content-Type'] = 'application/x-apple-aspen-config'
          response.headers['Content-Disposition'] = "attachment; filename=#{profile.name.gsub(/\s+/, '_')}.mobileconfig"
          render :xml => profile_plist
        else 
          render :text => "401 Unauthorized", :status => 401
       end
    end
    
    def get_signed_profile
        profile = Profile.find_by_id(params[:id])
        user_guid = session[:user]['generated_uid']
        user = User.find_by_guid(user_guid)
        if user == nil || profile == nil || !session[:user]['isAdmin']
            render :text => "401 Unauthorized", :status => 401
        else
            profile_plist = ProfileHelper.get_signed_profile(profile.id)
            response.headers['Content-Type'] = 'application/x-apple-aspen-config'
            response.headers['Content-Disposition'] = "attachment; filename=#{profile.name.gsub(/\s+/, '_')}.mobileconfig"
            render :xml => profile_plist
        end
    end
        
    def email_profile_to_users
        result = ProfileHelper::email_profile_to_users(params[:id])
        render :json => { :result => result }
    end
end
