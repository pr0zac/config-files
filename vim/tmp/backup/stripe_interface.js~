// Node.js Library for interfacing with Stripe APIs
// Written by Zac Morris
// Copyright (c) Caffeinated Mind Inc.
// Licensed under the MIT license:
// http://www.opensource.org/licenses/mit-license.php

var http = require('http');
var querystring = require('querystring');

var api_url = 'api.stripe.com';
var api_path = '/v1';
var api_key = 'fVEn0Vx3fCJbIH7kq62SqyHQuOkGlFfW';

exports.post_stripe_request = function (method, params, cb) {
  params.method = method;
  params.key = api_key;
  var request_body = querystring.stringify(params);
  
  var download_client = http.createClient('443', api_url, true);
  var request = download_client.request('POST', api_path, {'Content-Type': 'application/x-www-form-urlencoded', 'Content-Length': request_body.length, 'host': api_url});
  request.write(request_body);
  request.end();
  
  request.socket.on('error', function (error) {
    cb({'type': 'connection_error'}, null);
  });
  
  request.socket.on('timeout', function (error) {
    cb({'type': 'connection_error'}, null);
  });
  
  request.on('response', function (response) {
    var response_body = '';
    response.on('data', function (chunk) {
      response_body = response_body+chunk;
    });
    
    response.on('end', function () {
      if (response_body.length > 0) {
        var result = JSON.parse(response_body);
        if (result) {
          if (result.error) {
            cb(result.error, null);
          }
          else {
            cb(null, result);
          }
        }
        else {
          cb({'type': 'connection_error'}, null);
        }
      }
      else {
        cb({'type': 'connection_error'}, null);
      }
    });
  });
};

// execute_charge
// execute_charge is the most basic API call of all: it charges a credit or debit card.
// If the charge succeeds, it returns a charge object; if it fails (through invalid details or the card being declined), it returns an error.
// arguments:
// amount
// currency
// customer or card
// mnemonic
// cb: callback function, takes error, result parameters

exports.execute_charge = function (arguments, cb) {
  exports.post_stripe_request('execute_charge', arguments, cb);
};


// retrieve_charge
// retrieve_charge returns the charge object associated with the id you specify.
// You can store the id of a charge returned by execute_charge, and later retrieve all of the same information with retrieve_charge.
// Arguments:
// id
// cb: callback function, takes error, result parameters

exports.retrieve_charge = function (arguments, cb) {
  exports.post_stripe_request('retrieve_charge', arguments, cb);
};


// refund_charge
// refund_charge refunds a charge that was previously created to the credit or debit card that was originally charged.
// Once refunded, a charge can't be re-refundedâ€”if a refund succeeds, refund_charge will return an error.
// Arguments:
// id
// cb: callback function, takes error, result parameters

exports.refund_charge = function (arguments, cb) {
  exports.post_stripe_request('refund_charge', arguments, cb);
};


// create_customer
// create_customer creates a customer with the id specified. If additional information (such as a card or mnemonic) is provided, that is added to the customer object.
// Arguments:
// id
// card
// mnemonic
// subscription
// cb: callback function, takes error, result parameters

exports.create_customer = function (arguments, cb) {
  exports.post_stripe_request('create_customer', arguments, cb);
};


// update_customer
// update_customer modifies a customer to set the values of the parameters passed.
// If you pass the card parameter, we will validate that card and use it to bill the customer in future.
// If the auth param is passed, we will put a small authorization on the card when verifying it.
// If card is passed and fails the validation, the call fails. (The customer is not updated at all.)
// Arguments:
// id
// mnemonic
// card
// subscription
// cb: callback function, takes error, result parameters

exports.update_customer = function (arguments, cb) {
  exports.post_stripe_request('update_customer', arguments, cb);
};


// bill_customer
// bill_customer adds an amount to be charged to a customer's credit card, but does not charge it immediately.
// Instead, it is added to the total to be charged at the end of the billing month.
// bill_customer can be used to charge small amounts which would not be cost-effective to charge individually.
// Arguments:
// id
// amount
// currency
// cb: callback function, takes error, result parameters

exports.bill_customer = function (arguments, cb) {
  exports.post_stripe_request('bill_customer', arguments, cb);
};


// retrieve_customer
// retrieve_customer returns the customer object corresponding to the given id.
// Arguments:
// id
// cb: callback function, takes error, result parameters

exports.retrieve_customer = function (arguments, cb) {
  exports.post_stripe_request('retrieve_customer', arguments, cb);
};


// delete_customer
// delete_customer deletes the customer with the specified id. They will never be charged again, even if they have an outstanding balance on their account.
// Arguments:
// id
// cb: callback function, takes error, result parameters

exports.delete_customer = function (arguments, cb) {
  exports.post_stripe_request('delete_customer', arguments, cb);
};
