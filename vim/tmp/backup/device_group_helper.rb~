module DeviceGroupHelper
    def self.create(incoming_request)
        device_group = DeviceGroup.new
        temporary_id = incoming_request["temporary_id"]
        incoming_request.delete("temporary_id")
        device_group.attributes = incoming_request
        device_group.save

        return_hash = { :device_group => { :created => [ device_group.get_attributes.merge({ :temporary_id => temporary_id }) ] } }
        return return_hash
    end
  
    def self.update(device_group_id, incoming_request)
        device_group = DeviceGroup.find_by_id(device_group_id)
        device_group.attributes.each do |key, value|
            if incoming_request.has_key?(key)
                device_group[key] = incoming_request[key]
            end
        end
        
        removed_members = {}
        modified_members = []
        {"devices" => Device, "parent_device_groups" => DeviceGroup, "child_device_groups" => DeviceGroup}.each do |member_type, member_class|
            current_id_array = device_group.send(member_type).collect{ |member| member.id }
            incoming_id_array = incoming_request.has_key?(member_type) ? incoming_request[member_type] : []
            remove_id_array = current_id_array - incoming_id_array
            new_id_array = incoming_id_array - current_id_array
            
            for member_id in remove_id_array
                member = ["users", "user_groups"].include?(member_type) ? member_class.find_by_guid(member_id) : member_class.find_by_id(member_id)
                modified_members.push(member)
                case member_type
                when "devices"
                    device_group.devices.delete(member)
                when "parent_device_groups"
                    device_group.parent_device_groups.delete(member)
                when "child_device_groups"
                    device_group.child_device_groups.delete(member)
                end
            end
            
            for member_id in new_id_array
                member = ["users", "user_groups"].include?(member_type) ? member_class.find_by_guid(member_id) : member_class.find_by_id(member_id)
                if member != nil
                    modified_members.push(member)
                    case member_type
                    when "devices"
                        device_group.devices.push(member)
                    when "parent_device_groups"
                        device_group.parent_device_groups.push(member)
                    when "child_device_groups"
                        device_group.child_device_groups.push(member)
                    end
                else
                    real_member_type = {"devices" => "devices", "parent_device_groups" => "device_groups", "child_device_groups" => "device_groups"}[member_type]
                    if !removed_members.has_key?(real_member_type)
                        removed_members[real_member_type] = {:deleted => []}
                    end
                    removed_members[real_member_type][:deleted].push({ :id => member_id })
                end
            end
        end
        
        device_group.save
        device_group.reload
        
        task = Task.start_container_task(nil, modified_members, "PushSettings")
        
        if task == nil
            return_hash = removed_members.merge({ :device_group => { :updated => [ device_group.get_attributes ] } })
        else
            return_hash = removed_members.merge({ :profile => { :deleted => [ { :id => profile_id } ] },
                                                  :task => { :created => [ task.get_attributes ] } })
        end
        
        return return_hash
    end
  
    def self.destroy(device_group_id)
        device_group = DeviceGroup.find_by_id(device_group_id)
        devices = device_group.get_all_devices
        device_group.destroy
        
        task = Task.start_container_task(nil, devices, "PushSettings")
        
        if task == nil
            return_hash = { :device_group => { :deleted => [ { :id => device_group_id } ] } }
        else
            return_hash = { :device_group => { :deleted => [ { :id => device_group_id } ] },
                            :task => { :created => [ task.get_attributes ] } }
        end
        
        return return_hash
    end  

    def self.get_details(incoming_request)
        return_hash = { :device_group => { :retrieved => DeviceGroup.find( :all, :conditions => [ 'id in (?)', incoming_request["ids"] ] ).collect { |device_group| device_group.get_attributes } } }
        return return_hash
    end
    
    def self.find_all
        device_group_hash = { :device_group => { :retrieved => [] } }
        DeviceGroup.find(:all, :order => :name).each { |device_group| device_group_hash[:device_group][:retrieved].push( { :id => device_group.id } ) }
        return device_group_hash
    end
    
    def self.find_matching(incoming_request)
        search_string = incoming_request["search_string"].gsub(/\\|'/) { |c| "\\#{c}" }
        device_group_hash = { :device_group => { :retrieved => DeviceGroup.find(:all, :order => :name, :conditions => [ 'name ~* ?', search_string ]).collect { |device_group| device_group.get_attributes } } }
        return device_group_hash
    end
    
    def self.find_matching_detailed(incoming_request)
        search_string = incoming_request["search_string"].gsub(/\\|'/) { |c| "\\#{c}" }
        device_group_hash = { :device_group => { :retrieved => [] } }
        
        for column in DeviceGroup.columns
            if [:string, :text].include?(column.type)
                device_group_array = DeviceGroup.find(:all, :order => :name, :conditions => ["#{column.name} ~* ?", search_string]).collect { |device_group| device_group.get_attributes }
                device_group_hash[:device_group][:retrieved] = device_group_hash[:device_group][:retrieved] | device_group_array
            end
        end

        return device_group_hash
    end
    
    def self.get_ancestors(device_group_id)
        device_group = DeviceGroup.find_by_id(device_group_id)
        
        if device_group == nil
            return_hash = nil
        else
            return_hash = device_group.get_ancestors
        end
        
        return return_hash
    end
    
    def self.add_device(device_group_id, incoming_request)
        device_group = DeviceGroup.find_by_id(device_group_id)
      
        if device_group == nil
            logger.error "no device_group with that id"
            return_hash = { :device_group => { :deleted => [ { :id => device_group_id } ] } }
            if !Device.find_by_id(incoming_request["id"])
                return_hash[ :device ] = { :deleted => [ { :id => incoming_request["id"] } ] }
            end
            return return_hash
        end
      
        device = Device.find_by_id(incoming_request["id"])
        
        if device == nil
            logger.error "no device with that id"
            return_hash = { :device => { :deleted => [ { :id => incoming_request["id"] } ] } }
            return return_hash
        end
        
        if !device_group.devices.include?(device)
            device_group.devices.push(device)
            device_group.save
        end
        
        device_array = []
        
        device_group.devices.each do |device|
            device_array.push( device.id )
        end
        
        device_group_array = []
        
        device.device_groups.each do |device_group|
            device_group_array.push( device_group.id )
        end
        
        task = Task.start_new(device, "PushSettings")
        
        if task == nil
            return_hash = { :device_group => { :updated => [ { :id => device_group.id, :devices => device_array } ] },
                            :device => { :updated => [ { :id => device.id, :device_groups => device_group_array } ] } }
        else
            return_hash = { :device_group => { :updated => [ { :id => device_group.id, :devices => device_array } ] },
                            :device => { :updated => [ { :id => device.id, :device_groups => device_group_array } ] },
                            :task => { :created => [ task.get_attributes ] } }
        end
        
        return return_hash
    end
    
    def self.list_devices(device_group_id)
        device_group = DeviceGroup.find_by_id(device_group_id)
      
        if device_group == nil
            logger.error "no device_group with that id"
            return_hash = { :device_group => { :deleted => [ { :id => device_group_id } ] } }
            return return_hash
        end
        
        device_array = []
        
        device_group.devices.each do |device|
            device_array.push( device.id )
        end
        
        return_hash = { :device_group => { :retrieved => [ { :id => device_group.id, :devices => device_array } ] } }
        return return_hash
    end
    
    def self.remove_device(device_group_id, incoming_request)
        device_group = DeviceGroup.find_by_id(device_group_id)
      
        if device_group == nil
            logger.error "no device_group with that id"
            return_hash = { :device_group => { :deleted => [ { :id => device_group_id } ] } }
            if !Device.find_by_id(incoming_request["id"])
                return_hash[ :device ] = { :deleted => [ { :id => incoming_request["id"] } ] }
            end
            return return_hash
        end
      
        device = Device.find_by_id(incoming_request["id"])
        
        if device == nil
            logger.error "no device with that id"
            return_hash = { :device => { :deleted => [ { :id => incoming_request["id"] } ] } }
            return return_hash
        end
      
        device_group.devices.delete(device)
        device_group.save
      
        device_array = []
        
        device_group.devices.each do |device|
            device_array.push( device.id )
        end
        
        device_group_array = []
        
        device.device_groups.each do |device_group|
            device_group_array.push( device_group.id )
        end
        
        task = Task.start_new(device, "PushSettings")
        
        if task == nil
            return_hash = { :device_group => { :updated => [ { :id => device_group.id, :devices => device_array } ] },
                            :device => { :updated => [ { :id => device.id, :device_groups => device_group_array } ] } }
        else
            return_hash = { :device_group => { :updated => [ { :id => device_group.id, :devices => device_array } ] },
                            :device => { :updated => [ { :id => device.id, :device_groups => device_group_array } ] },
                            :task => { :created => [ task.get_attributes ] } }
        end
        
        return return_hash
    end
    
    def self.add_parent_device_group(device_group_id, incoming_request)
        device_group = DeviceGroup.find_by_id(device_group_id)
      
        if device_group == nil
            logger.error "no device_group with that id"
            return_hash = { :device_group => { :deleted => [ { :id => device_group_id } ] } }
            if !DeviceGroup.find_by_id(incoming_request["device_group_id"])
                return_hash[ :device_group ][ :deleted ].push( { :id => incoming_request["device_group_id"] } )
                end
            return return_hash
        end
      
        super_group = DeviceGroup.find_by_id(incoming_request["device_group_id"])        
        
        if super_group == nil
            logger.error "no device_group with that id"
            return_hash = { :device_group => { :deleted => [ { :id => incoming_request["device_group_id"] } ] } }
            return return_hash
        end
        
        if !device_group.has_device_group_as_relationship(super_group)
            device_group.parent_device_groups.push(super_group)
            device_group.save
        end
        
        parent_device_group_array = []
        
        device_group.parent_device_groups.each do |parent_device_group|
            parent_device_group_array.push( parent_device_group.id )
        end
        
        child_device_group_array = []
        
        super_group.child_device_groups.each do |child_device_group|
            child_device_group_array.push( child_device_group.id )
        end
        
        devices = device_group.get_all_devices
        
        task = Task.start_container_task(device_group, devices, "PushSettings")
        
        if task == nil
            return_hash = { :device_group => { :updated => [ { :id => device_group.id, :parent_device_groups => parent_device_group_array },
                                                           { :id => super_group.id, :child_device_groups => child_device_group_array } ] } }
        else
            return_hash = { :device_group => { :updated => [ { :id => device_group.id, :parent_device_groups => parent_device_group_array },
                                                           { :id => super_group.id, :child_device_groups => child_device_group_array } ] },
                            :task => { :created => [ task.get_attributes ] } }
        end
        
        return return_hash
    end
    
    def self.list_parent_device_groups(device_group_id)
        device_group = DeviceGroup.find_by_id(device_group_id)
      
        if device_group == nil
            logger.error "no device_group with that id"
            return_hash = { :device_group => { :deleted => [ { :id => device_group_id } ] } }
            return return_hash
        end
        
        parent_device_group_array = []
        
        device_group.parent_device_groups.each do |parent_device_group|
            parent_device_group_array.push( parent_device_group.id )
        end
        
        return_hash = { :device_group => { :retrieved => [ { :id => device_group.id, :parent_device_groups => parent_device_group_array } ] } }
        
        return return_hash
    end
    
    def self.remove_parent_device_group(device_group_id, incoming_request)
        device_group = DeviceGroup.find_by_id(device_group_id)
      
        if device_group == nil
            logger.error "no device_group with that id"
            return_hash = { :device_group => { :deleted => [ { :id => device_group_id } ] } }
            if !DeviceGroup.find_by_id(incoming_request["device_group_id"])
                return_hash[ :device_group ][ :deleted ].push( { :id => incoming_request["device_group_id"] } )
            end
            return return_hash
        end
      
        super_group = DeviceGroup.find_by_id(incoming_request["device_group_id"])
        
        if super_group == nil
            logger.error "no device_group with that id"
            return_hash = { :device_group => { :deleted => [ { :id => incoming_request["device_group_id"] } ] } }
            return return_hash
        end
              
        device_group.parent_device_groups.delete(super_group)
        device_group.save
        
        parent_device_group_array = []
        
        device_group.parent_device_groups.each do |parent_device_group|
            parent_device_group_array.push( parent_device_group.id )
        end
        
        child_device_group_array = []
        
        super_group.child_device_groups.each do |child_device_group|
            child_device_group_array.push( child_device_group.id )
        end
        
        devices = device_group.get_all_devices
        
        task = Task.start_container_task(device_group, devices, "PushSettings")
        
        if task == nil
            return_hash = { :device_group => { :updated => [ { :id => device_group.id, :parent_device_groups => parent_device_group_array },
                                                           { :id => super_group.id, :child_device_groups => child_device_group_array } ] } }
        else
            return_hash = { :device_group => { :updated => [ { :id => device_group.id, :parent_device_groups => parent_device_group_array },
                                                           { :id => super_group.id, :child_device_groups => child_device_group_array } ] },
                            :task => { :created => [ task.get_attributes ] } }
        end
        
        return return_hash
    end
    
    def self.add_child_device_group(device_group_id, incoming_request)
        device_group = DeviceGroup.find_by_id(device_group_id)
      
        if device_group == nil
            logger.error "no device_group with that id"
            return_hash = { :device_group => { :deleted => [ { :id => device_group_id } ] } }
            if !DeviceGroup.find_by_id(incoming_request["device_group_id"])
                return_hash[ :device_group ][ :deleted ].push( { :id => incoming_request["device_group_id"] } )
            end
            return return_hash
        end
      
        sub_group = DeviceGroup.find_by_id(incoming_request["device_group_id"])        
        
        if sub_group == nil
            logger.error "no device_group with that id"
            return_hash = { :device_group => { :deleted => [ { :id => incoming_request["device_group_id"] } ] } }
            return return_hash
        end
        
        if !device_group.has_device_group_as_relationship(sub_group)
            device_group.child_device_groups.push(sub_group)
            device_group.save
        end

        child_device_group_array = []
        
        device_group.child_device_groups.each do |child_device_group|
            child_device_group_array.push( child_device_group.id )
        end
        
        parent_device_group_array = []
        
        sub_group.parent_device_groups.each do |parent_device_group|
            parent_device_group_array.push( parent_device_group.id )
        end
        
        devices = sub_group.get_all_devices
        
        task = Task.start_container_task(device_group, devices, "PushSettings")
        
        if task == nil
            return_hash = { :device_group => { :updated => [ { :id => device_group.id, :child_device_groups => child_device_group_array },
                                                           { :id => sub_group.id, :parent_device_groups => parent_device_group_array } ] } }
        else
            return_hash = { :device_group => { :updated => [ { :id => device_group.id, :child_device_groups => child_device_group_array },
                                                           { :id => sub_group.id, :parent_device_groups => parent_device_group_array } ] },
                            :task => { :created => [ task.get_attributes ] } }
        end
        
        return return_hash
    end
    
    def self.list_child_device_groups(device_group_id)
        device_group = DeviceGroup.find_by_id(device_group_id)
      
        if device_group == nil
            logger.error "no device_group with that id"
            return_hash = { :device_group => { :deleted => [ { :id => device_group_id } ] } }
            return return_hash
        end
        
        child_device_group_array = []
        
        device_group.child_device_groups.each do |child_device_group|
            child_device_group_array.push( child_device_group.id )
        end
        
        return_hash = { :device_group => { :retrieved => [ { :id => device_group.id, :child_device_groups => child_device_group_array } ] } }
        
        return return_hash
    end
    
    def self.remove_child_device_group(device_group_id, incoming_request)
        device_group = DeviceGroup.find_by_id(device_group_id)
      
        if device_group == nil
            logger.error "no device_group with that id"
            return_hash = { :device_group => { :deleted => [ { :id => device_group_id } ] } }
            if !DeviceGroup.find_by_id(incoming_request["device_group_id"])
                return_hash[ :device_group ][ :deleted ].push( { :id => incoming_request["device_group_id"] } )
            end
            return return_hash
        end
      
        sub_group = DeviceGroup.find_by_id(incoming_request["device_group_id"])        
        
        if sub_group == nil
            logger.error "no device_group with that id"
            return_hash = { :device_group => { :deleted => [ { :id => incoming_request["device_group_id"] } ] } }
            return return_hash
        end
              
        device_group.child_device_groups.delete(sub_group)
        device_group.save
      
        child_device_group_array = []
        
        device_group.child_device_groups.each do |child_device_group|
            child_device_group_array.push( child_device_group.id )
        end
        
        parent_device_group_array = []
        
        sub_group.parent_device_groups.each do |parent_device_group|
            parent_device_group_array.push( parent_device_group.id )
        end
        
        devices = sub_group.get_all_devices
        
        task = Task.start_container_task(device_group, devices, "PushSettings")
        
        if task == nil
            return_hash = { :device_group => { :updated => [ { :id => device_group.id, :child_device_groups => child_device_group_array },
                                                           { :id => sub_group.id, :parent_device_groups => parent_device_group_array } ] } }
        else
            return_hash = { :device_group => { :updated => [ { :id => device_group.id, :child_device_groups => child_device_group_array },
                                                           { :id => sub_group.id, :parent_device_groups => parent_device_group_array } ] },
                            :task => { :created => [ task.get_attributes ] } }
        end
        
        return return_hash
    end
end
