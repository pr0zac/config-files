class InterfaceKnobSet < ActiveRecord::Base
  has_and_belongs_to_many :profiles
  has_and_belongs_to_many :security_knob_sets

  serialize :SetupModes
  serialize :security_relationship_ids, Array
  
  @@payload_type = "com.apple.interfaces.managed"
  @@payload_subidentifier = "interfaces"
  @@is_unique = false
  @@payload_name = "Network Interfaces"

  def self.payload_name
      @@payload_name
  end
  
  def self.payload_type
      @@payload_type
  end
  
  def self.payload_subidentifier
      @@payload_subidentifier
  end
  
  def self.is_unique
      @@is_unique
  end
  
  def is_for_ios
    if self.Interface.downcase == "wifi"
      return true
    else
      return false
    end
  end
  
  def delete
    self.deleted = true
    self.profiles.clear
    self.security_knob_sets.clear
    self.save
  end

  def before_save
    if self.respond_to?(:session) && self.session.has_key?(:user) && self.session[:user].has_key?('generated_uid')
       self.last_modified_guid = self.session[:user]['generated_uid']
    else
       self.last_modified_guid = nil
    end
    
      if self.PayloadUUID == nil
          uuid = UUID.new
          self.PayloadUUID = uuid.generate
      end
      
      if self.PayloadVersion == nil
          self.PayloadVersion = 1
      else
          self.PayloadVersion = self.PayloadVersion + 1
      end

      for profile in self.profiles
          profile.save
      end

      for relationship_id in self.security_relationship_ids
        sec_knob_set = SecurityKnobSet.find(:first, :conditions => {:relationship_id => relationship_id})
        if sec_knob_set != nil && !self.security_knob_sets.include?(sec_knob_set)
          self.security_knob_sets.push(sec_knob_set)
        elsif sec_knob_set == nil
          self.security_relationship_ids.delete(relationship_id)
        end
      end

      for sec_knob_set in self.security_knob_sets
        relationship_id = sec_knob_set.relationship_id
        if !self.security_relationship_ids.include?(relationship_id)
          self.security_knob_sets.delete(sec_knob_set)
        end
      end
  end
  
  def get_attributes
      return_hash = self.attributes
      
      return_hash[:profiles] = []
      for profile in self.profiles
          return_hash[:profiles].push(profile.id)
      end
      
      return_hash[:security_knob_sets] = self.security_knob_sets.collect{|ks| ks.id}
      
      return return_hash
  end

  def generate_payload_hash(root_payload_identifier)
    payload_type = "com.apple.#{self.Interface.downcase}.managed"

    payload_hash = { "PayloadType" => payload_type,
                     "PayloadVersion" => 1,
                     "PayloadIdentifier" => "#{root_payload_identifier}.#{self.class.payload_subidentifier}",
                     "PayloadUUID" => self.PayloadUUID
                   }
    
    self.attributes.each do |attribute, value|
      internal_use_flag = "internal_use_flag"
      if value != nil && !payload_hash.key?(attribute) && attribute.to_s != "id" && attribute[0, internal_use_flag.length] != internal_use_flag &&
        attribute != "created_at" && attribute != "updated_at" && !((value.class == Hash || value.class == Array) && value.empty?)
        payload_hash[attribute] = value
      end
    end
    
    if self.security_knob_sets != nil && self.security_knob_sets.length > 0
      if self.Interface.downcase == "wifi"
        payload_hash["EAPClientConfiguration"] = self.security_knob_sets[0].EAPClientConfiguration
      else
        config_array = []
        for sec_knob_set in self.security_knob_sets
          config_array.push(sec_knob_set.EAPClientConfiguration)
        end
        payload_hash["EAPClientConfiguration"] = config_array
      end
    end

    return payload_hash
  end
  
  def []=(key,value)
    if key == "security_knob_sets"
      self.security_knob_sets = value
    else
      super(key,value)
    end
  end
  
  def security_knob_sets= knob_set_array
    cur_knob_set_ids = self.security_knob_sets.collect{|ks| ks.id}
    new_id_array = knob_set_array - cur_knob_set_ids
    remove_id_array = cur_knob_set_ids - knob_set_array

    for id in new_id_array
      sec_knob_set = SecurityKnobSet.find_by_id(id)
      
      if sec_knob_set != nil
        self.security_knob_sets.push(sec_knob_set)
      end
    end

    for id in remove_id_array
      sec_knob_set = SecurityKnobSet.find_by_id(id)

      if sec_knob_set != nil
        self.security_knob_sets.delete(sec_knob_set)
      end
    end
  end
end
